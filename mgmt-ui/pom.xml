<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org</groupId>
	<artifactId>mgmt-ui</artifactId>
	<version>1.0.0</version>
	<name>mgmt-ui</name>
	<description>
		A simple mgmt ui app using angular.
	</description>

	<properties>
        <frontend-maven-plugin.version>1.7.6</frontend-maven-plugin.version>
        <node.version>v14.17.2</node.version>
		<npm.version>6.14.13</npm.version>
	</properties>

	<build>
		<plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-app-for-build</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/build-app</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/app</directory>
                                    <filtering>true</filtering>
                                    <excludes>
                                    	<exclude>node_modules/**/*</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-files-for-docker-build</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/docker</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/docker</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-app-for-docker-build</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/docker/context/app</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.build.directory}/build-app/dist/${artifactId}</directory>
                                    <filtering>true</filtering>
                                    <excludes>
                                    	<exclude>node_modules/**/*</exclude>
                                    </excludes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-chart-for-helm-package</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/chart/${project.artifactId}-${project.version}</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/helm/chart</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-config-for-helm-package</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/chart/${project.artifactId}-${project.version}/config</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/docker/context/config</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

			<plugin>
			    <groupId>com.github.eirslett</groupId>
			    <artifactId>frontend-maven-plugin</artifactId>
			    <version>${frontend-maven-plugin.version}</version>
			    <configuration>
			        <workingDirectory>${project.build.directory}/build-app</workingDirectory>
			        <nodeVersion>${node.version}</nodeVersion>
			        <npmVersion>${npm.version}</npmVersion>
				</configuration>
			    <executions>
					<execution>
						<id>install node and npm</id>
                        <phase>compile</phase>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
					</execution>
					<execution>
			            <id>npm install</id>
                        <phase>compile</phase>
			            <goals>
			                <goal>npm</goal>
			            </goals>
			        </execution>
			        <execution>
			            <id>npm run build</id>
                        <phase>compile</phase>
			            <goals>
			                <goal>npm</goal>
			            </goals>
			            <configuration>
			                <arguments>run build</arguments>
			            </configuration>
			        </execution>
			    </executions>
			</plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>exec-docker-build</id>
                        <phase>package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>docker</executable>
                            <commandlineArgs>build --no-cache -t docker.localhub.com/${project.artifactId}:${project.version} ${project.build.directory}/docker</commandlineArgs>
                        </configuration>
                    </execution>

                    <execution>
                        <id>exec-helm-lint</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>helm</executable>
                            <commandlineArgs>lint ${project.build.directory}/chart/${project.artifactId}-${project.version}</commandlineArgs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>exec-helm-package</id>
                        <phase>package</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>helm</executable>
                            <commandlineArgs>package ${project.build.directory}/chart/${project.artifactId}-${project.version} -d ${project.build.directory}/chart</commandlineArgs>
                        </configuration>
                    </execution>
                    <execution>
                        <id>exec-helm-delete</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>helm</executable>
                            <commandlineArgs>delete ${project.artifactId}</commandlineArgs>
                            <successCodes>
                                <successCode>0</successCode>
                                <successCode>1</successCode>
                            </successCodes>
                        </configuration>
                    </execution>
                    <execution>
                        <id>exec-helm-install</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <executable>helm</executable>
                            <commandlineArgs>install ${project.artifactId} ${project.build.directory}/chart/${project.artifactId}-${project.version}.tgz --wait --debug</commandlineArgs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-jar-plugin</artifactId>
				<executions>
					<execution>
						<id>default-jar</id>
						<phase>none</phase>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<executions>
					<execution>
						<id>default-install</id>
						<phase>none</phase>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
