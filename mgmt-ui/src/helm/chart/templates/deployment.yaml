#@formatter:off
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
    version: {{ .Chart.Version }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  strategy:
{{ toYaml .Values.deployment.strategy | indent 4 }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        release: {{ .Release.Name }}
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      affinity:
{{ toYaml .Values.deployment.affinity | indent 8 }}
      nodeSelector:
{{ toYaml .Values.deployment.nodeSelector | indent 8 }}
      tolerations:
{{ toYaml .Values.deployment.tolerations | indent 8 }}
      imagePullSecrets:
{{ toYaml .Values.docker.imagePullSecrets | indent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.docker.registry }}/{{ .Chart.Name }}:{{ .Chart.Version }}
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 80
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 80
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        resources:
{{ toYaml .Values.deployment.resources | indent 10 }}
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: config
        configMap:
          name: {{ .Chart.Name }}
